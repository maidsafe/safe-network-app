name: 'Publish assets to s3'
# Trigger the workflow on pull request activity
on:
  release:
    # Only use the types keyword to narrow down the activity types that will trigger your workflow.
    types: [published, edited]

jobs:
  get_release_assets:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: AKIAVVODCRMSJ5MV63VB
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOY_USER_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-west-2
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUCKET: safe-network-app
      APPLICATION: sn_app
    steps:
      - name: Set tag as env
        run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF:10})
      - name: lets check tag
        run: echo ${{ env.RELEASE_VERSION }}
      # set an env var to grab the correct yaml files
      - name: set yaml file
        shell: bash
        run: |
          echo ::set-env name=YAML_FILE::"$(echo "latest")"
          if [[ $RELEASE_VERSION == *"-alpha"* ]]; then
            echo ::set-env name=YAML_FILE::"$(echo "alpha")"
          fi
          if [[ $RELEASE_VERSION == *"-beta"* ]]; then
            echo ::set-env name=YAML_FILE::"$(echo "beta")"
          fi
      - name: lets check yaml
        run: echo ${{ env.YAML_FILE }}
      # mac
      - name: Download build from s3 for this tag
        shell: bash
        run: aws s3 cp s3://${{ env.BUCKET }}/tag-builds/${{ env.RELEASE_VERSION }} . --recursive

      # do more...
      - name: Check dlded assets
        shell: bash
        run: ls .

      # Upload all the release archives to S3;

      # mac
      - name: Upload to s3
        shell: bash
        run: aws s3 cp "${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-mac-x64.dmg" s3://${{ env.BUCKET }}/${{ env.APPLICATION }}-mac/ --acl public-read

      - name: Upload to s3
        shell: bash
        run: aws s3 cp "${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-mac-x64.dmg.blockmap" s3://${{ env.BUCKET }}/${{ env.APPLICATION }}-mac/ --acl public-read

      - name: Upload to s3
        shell: bash
        run: aws s3 cp "${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-mac-x64.zip" s3://${{ env.BUCKET }}/${{ env.APPLICATION }}-mac/ --acl public-read

      - name: Upload to s3
        shell: bash
        run: aws s3 cp "${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-mac-x64.pkg" s3://${{ env.BUCKET }}/${{ env.APPLICATION }}-mac/ --acl public-read

      # linux
      - name: chmod
        run: chmod +x ${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-linux-x64.AppImage
      - name: Upload to s3
        shell: bash
        run: aws s3 cp "${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-linux-x64.zip" s3://${{ env.BUCKET }}/${{ env.APPLICATION }}-linux/ --acl public-read

      - name: Upload to s3
        shell: bash
        run: aws s3 cp "${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-linux-x64.AppImage" s3://${{ env.BUCKET }}/${{ env.APPLICATION }}-linux/ --acl public-read

      # win

      - name: Upload to s3
        shell: bash
        run: aws s3 cp "${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-win-x64.exe" s3://${{ env.BUCKET }}/${{ env.APPLICATION }}-win/ --acl public-read
      - name: Upload to s3
        shell: bash
        run: aws s3 cp "${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-win-x64.exe.blockmap" s3://${{ env.BUCKET }}/${{ env.APPLICATION }}-win/ --acl public-read

      # YAMLS

      - name: Upload to s3
        shell: bash
        run: aws s3 cp ${{ env.YAML_FILE }}.yml s3://${{ env.BUCKET }}/${{ env.APPLICATION }}-win/ --acl public-read
      - name: Upload to s3
        shell: bash
        run: aws s3 cp ${{ env.YAML_FILE }}-mac.yml s3://${{ env.BUCKET }}/${{ env.APPLICATION }}-mac/ --acl public-read
      - name: Upload to s3
        shell: bash
        run: aws s3 cp ${{ env.YAML_FILE }}-linux.yml s3://${{ env.BUCKET }}/${{ env.APPLICATION }}-linux/ --acl public-read

      # Update the release with artifacts
      - name: Release generation
        uses: Xotl/cool-github-releases@v1
        with:
          mode: update
          isPrerelease: contains(github.ref, "alpha") || contains(github.ref, "beta")
          assets: ${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-mac-x64.dmg;${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-linux-x64.AppImage|application/vnd.appimage;${{ env.APPLICATION }}-${{ env.RELEASE_VERSION }}-win-x64.exe;
          github_token: ${{ github.token }}
          tag_name: ${{ env.RELEASE_VERSION }}
